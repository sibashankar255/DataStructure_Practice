package array;

import java.util.HashMap;

public class SubArray {

    //subarray
    //continuous part of array
    // i<=j
    //single element, complete array are subarray
    //no element is not a subarray
    //total no of subarrays -> n(n+1)/2

    //subsequence
    //any sequence that can be generated by deleting 0 or more elements from the array

    //maximum sum subarray
    public static int maxSubArraySum(int[] arr){
        int maxSum =0;
        int currSum =0;
        for (int i=0; i<arr.length;i++){
            currSum = currSum+arr[i];
            if (currSum>maxSum){
                maxSum=currSum;
            }
            if (currSum<0){
                currSum=0;
            }
        }
        return maxSum;
    }

    //count of subArray sum equals to k
    public static int countSubArray(int[] nums,int K){
        int count = 0;
        int sum = 0;
        // Store the cumulative sum and its frequency in a HashMap
        HashMap<Integer, Integer> sumFrequency = new HashMap<>();
        sumFrequency.put(0, 1); // To consider subarrays starting from index 0

        for (int num : nums) {
            sum += num;
            int diff = sum - K;

            if (sumFrequency.containsKey(diff)) {
                // If a cumulative sum (sum - K) exists in the HashMap,
                // it means there are subarrays with the desired sum
                count += sumFrequency.get(diff);
            }

            // Update the frequency of the current cumulative sum
            sumFrequency.put(sum, sumFrequency.getOrDefault(sum, 0) + 1);
        }

        return count;
    }






}
